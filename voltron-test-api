#!/usr/bin/env node

var program = require('commander');
var TrafficFactory = require('./lib/traffic_factory');
var Rx = require('rx');
var TrafficProcessor = require('./lib/traffic_processor');
var table = require('cli-table');
var csv = require('./lib/format_api_csv');

program
  .option('-r --requests <requests>', 'Requests to send', parseInt)
  .option('-t --time <time>', 'Time in seconds to run test for. Defaults to 60', parseInt)
  .option('-c --clients <number>', 'Number of clients to generate', parseInt)
  .option('-rps --rate <number>', 'Number of requests per second', parseInt)
  .option('--csv', 'Print data in raw CSV form')
  .option('--csv-headers', 'Print headers on CSV output')
  .parse(process.argv);

var requestsPerSecond = program.rate;
var requests = program.requests;
var clients = program.clients;



var url = program.args[0];
if(!url) {
  program.help();
  process.exit(1);
}

if(!url) {
  throw new Error('Requires url for crawling.');  
}

var opts = {
  url: url,
  requestsPerSecond: requestsPerSecond,
  requests: requests,
  clients: clients
};

var trafficFactory = new TrafficFactory(opts);
trafficFactory.start();

var duration = program.time || 60;
var time = duration * 1000;


function processData(data) {
  var trafficProcessor = new TrafficProcessor(data);
  trafficProcessor.start(function(d) {
    var header1 = ['code', 'average'];
    var header2 = ['path', 'average'];

    var t1 = new table({
      head: header1  
    });
    var t2 = new table({
      head: header2  
    });

    d.filter(function(p) {return p.type === 'code';}).forEach(function(p) {
      t1.push([p.code, p.avg]);  
    });

    d.filter(function(p) {return p.type === 'path';}).forEach(function(p) {
      t2.push([p.path, p.avg]);  
    });

    d.filter(function(p) {return p.type ==='overall';}).forEach(function(p) {
      console.log('Overall request average duration:' + p.avg);
    });

    console.log('Average request time by status code');
    console.log(t1.toString());

    console.log('Average request time by path.');
    console.log(t2.toString());
  });  
}

function processCsv(data) {
  var trafficProcessor = new TrafficProcessor(data);
  trafficProcessor.start(function(d) {
  });
}

setTimeout(function() {
  trafficFactory.kill();
  if(program.csv) {
    csv(trafficFactory, program.csvHeaders);
  } else {
    processData(trafficFactory.events);
  }
  
}, time);

['SIGINT', 'SIGTERM'].forEach(function(signal) {
  process.on(signal, function() {
    trafficFactory.kill();  
  });
});
